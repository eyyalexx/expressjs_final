<% include partials/header %>
	<% include partials/navbar %>
		<div id="container">
			<img id="nodelogo" src="pictures/nodejs2.png">
		</div>

		<hr>
		<div id="snapshot">
			<h1>Snapshot</h1>
			<p>
				Node.js is a Javascript run-time environment used to execute Javascript on the server. It expressed the goal of using Javascript
				for both, client and server side development, so that web development can be unified around a single language. Express.js
				is a framework for Node.js which helps you organize your application's routing and use any templating solutions with
				minimal effort. It is designed to make the building of web applications and APIs easy and intuitive.
			</p>
		</div>
		<hr>

		<div id="popularity">
			<h1>Popularity</h1>
			<br>
			<p>
				<ul>
					<li>Express.js is one of the most popular frameworks on npm.</li>
				</ul>
				<br>
				<div id="popularity">
					<img id="popularity_image" src="pictures/popularity.png">
				</div>
			</p>
			<br>
		</div>
		<hr>

		<div id="strength&weakness">
			<h1>Strengths/Weaknesses:</h1>
				<p>
					<h4>Strengths</h4>
					<ul>
						<li>Fast App Development: Since Javascript is used for both back and front-end development, Javascript developers can be full-stack developers. This makes the development process much faster.</li>
						<li>Large Open Source Community: As one of the most popular Node.js frameworks, Express is constantly reviewed and improved by a large community of users. It is also very well documented.</li>
						<li>Easy Integration of Middleware: Express is very minimalistic, as such, the Express team has published many Middleware packages that can be used as needed to solve many development issues.</li>
						<li>I/O Handling: Express has a reputation for being a great framework to use for applications that get many requests from users.
						<li>Easy to Learn: Being so well documented, Express is very easy to learn. Plus, any familiarity with Javascript will make it easy to get started.</li>
					</ul>
				</p>
				<p>
					<h4>Weaknesses</h4>
					<ul>
						<li>Callbacks: The event-driven, callback nature of Express (and Node.js) can be difficult for developers with experience using other languages and frameworks to immediately grasp.</li>
						<li>Understanding Middleware: Since the use of Middleware functions is the basis for a lot of Express, understanding the core concepts of Middleware and how to use it is essential, but can be difficult to fully understand.</li>
					</ul>
				</p>
		</div>
		<hr>

		<div id="use">		
			<h1>Who Uses Express?</h1>
				<p>
					Express particularly excels in web applications which interact heavily with, and collect a lot of data from, third parties, as well as applications which need to be updated in real-time as data is received. As mentioned above, Node.js and Express are excellent at handling many simultaneous requests from users. The non-blocking nature of Node.js then allows for real-time updates to be made, with immense scalability.	
				</p>
				<p>
					A prime example of a company that fits such a mold and uses Express, is Uber. Uber obviously has to have very good I/O handling, and Express's exceptional abilities to handle that are precisly why Uber uses it. Full lists of companies using Express can be found <a href="https://expressjs.com/en/resources/companies-using-express.html">here</a>.
				</p>	
		</div>
		<hr>
		<br>
		<br>
		<br>
		<br>
		
<% include partials/footer %>
