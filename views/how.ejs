<% include partials/header %>
<% include partials/navbar %>
<h1>Our First Express Application</h1>
<p>In this tutorial, we will create our very first Express application. We will be creating a simple <i>weather app</i>.
<p>Before we start this tutorial, <a href="/install"><u>please download and install Express</u></a>. We provide a tutorial in our <a href="/install"><u>installation</u></a> section on how to do this. 
<p class="section">Once Express is setup, create a file named <i>app.js</i>. This may be different depending on the settings you entered when initializing your node project. For the purposes of this tutorial we will call this file <i>app.js</i></p>
<figure class="hint">
	<pre>
		"app.js" will be the name of your <b>entry point</b> specified inside your package.json
	</pre>
</figure>
<p>Before we begin writing our HTML, we must setup a few things inside app.js.</p>
<hr>
<h2>Setup app.js</h2>
<p>Like most languages we must include libraries/frameworks we will be using:</p>
<figure class="highlight">
	<pre>
		<code>
			var express = require('express');<br>
			var bodyParser = require('body-parser');<br>
			var path = require('path');<br>
		</code>
	</pre>
</figure>
<p>To use express, we will assign express to a variable:</p>
<figure class="highlight">
	<pre>
		<code>
			var app = express();
		</code>
	</pre>
</figure>
<p>Next we must tell express to serve static files such as HTML, CSS files, and JavaScript files. To do this, we type in the following code:</p>
<figure class="highlight">
	<pre>
		<code>
			app.use(express.static(path.join(__dirname,'public')));
		</code>
	</pre>
</figure>
<p>This will tell out app to use the <i>public</i> folder for all our static files.</p>
<p>The last lines of code/methods will run the server on a port you specify:</p>
<figure class="highlight">
	<pre>
		<code>
			app.listen(8000, function(){<br>
			&nbsp&nbsp&nbsp console.log('Server started on Port ' + 8000);<br>
			});
		</code>
	</pre>
</figure>
<br>
<p>Your app.js should look like this:</p>
<figure class="highlight">
	<pre>
		<code>
			var express = require('express');<br>
			var bodyParser = require('body-parser');<br>
			var path = require('path');<br><br>
			var app = express();<br><br>
			app.use(express.static(path.join(__dirname,'public')));<br><br>
			app.listen(8000, function(){<br>
			&nbsp&nbsp&nbsp console.log('Server started on Port ' + 8000);<br>
			});
		</code>
	</pre>
</figure>
<p>To run our webserver, open terminal and navigate into your project and type in the following command:</p>
<figure class="highlight">
	<pre>
		<code>
			$ node app.js
		</code>
	</pre>
</figure>
<p>If everything went well, we should see:</p>
<figure class="highlight">
	<pre>
		<code>
			$ node app.js<br>
			Server started on Port 8000
		</code>
	</pre>
</figure>
<p>Congratulations, we just made our first express application!<br>Now the fun part, editing/creating our index.html<br><br> We can access our website by going to our web-browser and entering <i>localhost:8000</i> into our URL.</p>
<hr>

<h2>Get weather data</h2>

<p>To get the weather data for each city we will use the <i>openweathermap</i> api. More information about how to use the openweathermap api can be found at: <a href="https://openweathermap.org/current"><u>openweathermap.org/current</u></a></p> 

<p>First, we will need to add the request module to our project. This can be done by adding the following code to the top of the app.js file: </p>
<figure class="highlight">
	<pre>
		<code>
			var request = require('request');
		</code>
	</pre>
</figure>

<p>And then run the following in terminal from your project folder: </p>
<figure class="highlight">
		<pre>
			<code>
				$ npm install -S request
			</code>
		</pre>
</figure>

<p>Add the following code to your <i>app.js</i>:</p>
<figure class="highlight">
	<pre>
		<code>
			
			app.post('/weather', function (req, res) {<br>
			&nbsp&nbsp&nbsp var city = req.body.city;<br>
			&nbsp&nbsp&nbsp console.log(city);<br>
			&nbsp&nbsp&nbsp var url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`<br><br>
			  
			&nbsp&nbsp&nbsp request(url, function (err, response, body) {<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp if(err){<br>
			
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp res.json({error: 'Error!'});<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp } else {<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp var weather = JSON.parse(body)<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp if(weather.main == undefined){<br>
			
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp res.json({error: 'Main Error!'});<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp } else {<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbspres.json(weather);<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp &nbsp&nbsp&nbsp }<br>
			&nbsp&nbsp&nbsp &nbsp&nbsp&nbsp }<br>
			&nbsp&nbsp&nbsp });<br>
			}); <br>
		</code>
	</pre>
</figure>

<p>The above code creates a new post route at /weather. Which mean, that everytime a post request is made to <i>localhost:8000/weather</i> the function is invoked.</p>


<% include partials/footer %>
