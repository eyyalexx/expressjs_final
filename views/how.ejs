<% include partials/header %>
<% include partials/navbar %>
<h1>Our First Express Application</h1>
<p>In this tutorial, we will create our very first Express application using EJS to template our html. We will create a <i>weather app</i>.
<p>Before we start this tutorial, <a href="/install"><u>please download and install Express</u></a>. We provide a tutorial in our <a href="/install"><u>installation</u></a> section on how to do this. EJS can be installed via <i>npm</i>. We can install EJS using the following command inside your Nodejs project:
<figure class="highlight">
	<pre>
		<code>
			//local installation<br>
			$ npm install ejs --save<br><i>or</i><br>
			//globally installation<br>
			$ npm install ejs -g
		</code>
	</pre>
</figure>
<p class="section">Once Express and EJS are setup, create a file named <i>app.js</i>. This may be different depending on the settings you entered when initializing your node project. For the purposes of this tutorial we will call this file <i>app.js</i></p>
<figure class="hint">
	<pre>
		"app.js" will be the name of your <b>entry point</b> specified inside your package.json
	</pre>
</figure>
<p>Before we begin writing our HTML, we must setup a few things inside app.js.</p>
<hr>
<p>Like most languages we must include libraries/frameworks we will be using:</p>
<figure class="highlight">
	<pre>
		<code>
			var express = require('express');<br>
			var bodyParser = require('body-parser');<br>
			var path = require('path');<br>
		</code>
	</pre>
</figure>
<p>To use express, we will assign express to a variable:</p>
<figure class="highlight">
	<pre>
		<code>
			var app = express();
		</code>
	</pre>
</figure>
<p>Next we must specify to express what to do when a client connects to our landing page.<br>
to do this, we type in the follow code/method:</p>
<figure class="highlight">
	<pre>
		<code>
			app.get('/', function(request, response){<br>
			&nbsp&nbsp&nbsp response.render('index');<br>
			});
		</code>
	</pre>
</figure>
<p>This will tell express to render the file index(.ejs) to the client. We will write the HTML for the ejs file later.</p>
<p>The last lines of code/methods will run the server on a port you specify:</p>
<figure class="highlight">
	<pre>
		<code>
			app.listen(80, function(){<br>
			&nbsp&nbsp&nbsp console.log('Server started on Port ' + 80);<br>
			});
		</code>
	</pre>
</figure>
<br>
<p>Your app.js should look like this:</p>
<figure class="highlight">
	<pre>
		<code>
			var express = require('express');<br>
			var bodyParser = require('body-parser');<br>
			var path = require('path');<br><br>
			var app = express();<br><br>
			app.get('/', function(request, response){<br>
			&nbsp&nbsp&nbsp response.render('index');<br>
			});<br><br>
			app.listen(80, function(){<br>
			&nbsp&nbsp&nbsp console.log('Server started on Port ' + 80);<br>
			});
		</code>
	</pre>
</figure>
<p>To host this website, navigate into your project and open a terminal and type in the following Command:</p>
<figure class="highlight">
	<pre>
		<code>
			$ node app.js
		</code>
	</pre>
</figure>
<p>If everything went well, we should see:</p>
<figure class="highlight">
	<pre>
		<code>
			$ node app.js<br>
			Server started on Port 80
		</code>
	</pre>
</figure>
<p>Congratulations, we just made our first express application!<br>Now the fun part, editing/creating our index.ejs<br><br> We can access our website by going to our web-browser and entering <i>localhost:port</i> into our URL.</p>
<hr>
<h1>Routing</h1>
<p>Routing determines how our express app responds to client requests, whether they are GET, POST, DELETE, PUT, and so on. We have already created a route, recall earlier:</p>
<figure class="highlight">
	<pre>
		<code>
			app.get('/', function(request, response){<br>
			&nbsp&nbsp&nbsp response.render('index');<br>
			});
		</code>
	</pre>
</figure>
<figure class="hint">
	<pre>
		Hint: Browsers send GET to servers when entering/navigating a URL
	</pre>
</figure>
<p>This is a method call to our express application which binds the GET route of "<b>/</b>" aka "http://domainName.com<b>/</b>" to a function which we define on the spot. We can think of <b>/</b> as the root of our website. When the root of our website is called (GET), express will intercept the message and send (in our case) index.ejs to the client.</p>
<p>We can use similar methods inside express to route different calls like form posts.</p>




<% include partials/footer %>
